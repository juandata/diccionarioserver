{"version":3,"sources":["Assets/logoDiccionarioEmberaEspanol.jpeg","Atoms/AppBarHeader.js","Atoms/TextInput.js","Atoms/TextInputTranslation.js","Atoms/SimpleSelect.js","Atoms/CircularLoader.js","Atoms/Translation.js","Atoms/SelectWords.js","Translator/TensorFlowModels.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","logoStyles","width","AppBarHeader","classes","className","AppBar","position","Toolbar","src","Logo","alt","Typography","variant","input","marginTop","name","TextInput","props","useState","text","setText","noValidate","autoComplete","onSubmit","ev","preventDefault","TextField","id","label","value","onChange","event","target","handleChange","TextInputTranslation","formControl","margin","minWidth","selectEmpty","SimpleSelect","languageSelect","setLanguageSelect","FormControl","InputLabel","Select","labelId","simpleSelectHandleChange","MenuItem","display","marginLeft","CircularLoader","CircularProgress","bullet","transform","fontSize","pos","marginBottom","Translation","loading","setLoading","translation","setTranslation","useEffect","textToTranslate","specialSymbols","textReplaced","undefined","replace","normalize","toLowerCase","entriesArray","entriesArrayCheck","Object","entries","frases","palabras","index","length","process","property","push","kindOfTranslation","coincide","textoEnMinusculaSinCaracteresEspeciales","every","el","fraseEnEspanolEnMinusculasSinCaracteresEspeciales","fraseEnEmberaEnMinusculasSinCaracteresEspeciales","wordReplacedFinal","temporalArrayForSavingInnerArrays","wordsFormatted","map","word","wordReplaced","Array","isArray","innerWord","innerWordReplaced","forEach","includes","find","indexTwo","setTimeout","Card","CardContent","Grid","container","justify","color","gutterBottom","component","SelectWords","Spanish","setWord","selectWordsOnChange","uuid_v4","model","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","ys","fit","epochs","then","predict","print","button","cardStyles","dividerStyles","App","userTextInput","setUserTextInput","userTextInputTranslation","setUserTextInputTranslation","translationSelected","setTranslationSelected","translationSelectedTranslation","setTranslationSelectedTranslation","selectChanged","direction","alignContent","align","Divider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Helmet","charSet","document","getElementById"],"mappings":"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","file":"static/js/main.14b84afc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoDiccionarioEmberaEspanol.fd232786.jpeg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Logo from '../Assets/logoDiccionarioEmberaEspanol.jpeg'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  logoStyles: {\r\n    width: '60px',\r\n    marginRight: '10px'\r\n  }\r\n}));\r\n/**\r\n * Encabezado, es la sección que renderiza el logo y el título de la app\r\n */\r\nexport default function AppBarHeader() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {<img className={classes.logoStyles} src={Logo} alt='Logo Diccionario Español-Embera' />}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Diccionario Español-Embera / Embera-Español\r\n          </Typography>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n// <Button color=\"inherit\">Login</Button>","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  input: {\r\n    marginTop: '8px'\r\n  }\r\n}), {\r\n  name: 'MuiFilledInput'\r\n});\r\n/**\r\n * El input typo texto que recibe lo que escribe el usuario para buscar la palabra en el objeto JSON\r\n * @param {function} handleChange Una función callback que recibe el texto del usuario y lo pasa al componente\r\n * padre APP.  \r\n */\r\nexport default function TextInput(props) {\r\n  const classes = useStyles();\r\n  const [text, setText] = useState('');\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n    props.handleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={(ev) => ev.preventDefault()}>\r\n      <TextField className={classes.input} id=\"filled-basic\" label=\"Ingresa la palabra a traducir\" variant=\"filled\" value={text}\r\n        onChange={handleChange} \r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  handleChange: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  input: {\r\n    marginTop: '8px'\r\n  }\r\n}), {\r\n  name: 'MuiFilledInput'\r\n});\r\n/**\r\n * El input typo texto que recibe lo que escribe el usuario para buscar la palabra en el objeto JSON\r\n * @param {function} handleChange Una función callback que recibe el texto del usuario y lo pasa al componente\r\n * padre APP.  \r\n */\r\nexport default function TextInputTranslation(props) {\r\n  const classes = useStyles();\r\n  const [text, setText] = useState('');\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n    props.handleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={(ev) => ev.preventDefault()}>\r\n      <TextField className={classes.input} id=\"filled-basic\" label=\"Ingresa la frase a traducir\" variant=\"filled\" value={text}\r\n        onChange={handleChange} \r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nTextInputTranslation.propTypes = {\r\n  handleChange: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * Input selectivo que permite al usuario decidir que tipo de traducción realizar, esta se envia al componente\r\n * padre APP\r\n * @param {function} simpleSelectHandleChange callback que comunica al componente padre el tipo de traducción (Español-Embera/Embera-Español)\r\n   @param {string} value tipo de traducción elegida por el usuario \r\n */\r\nexport default function SimpleSelect(props) {\r\n  const classes = useStyles();\r\n  const [languageSelect, setLanguageSelect] = useState('Español-Embera');\r\n\r\n  const handleChange = (event) => {\r\n    setLanguageSelect(event.target.value);\r\n    props.simpleSelectHandleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-filled-label\">Traducción</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={languageSelect}\r\n          onChange={handleChange} >\r\n          <MenuItem value={'Español-Embera'}>Español-Embera</MenuItem>\r\n          <MenuItem value={'Embera-Español'}>Embera-Español</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nSimpleSelect.propTypes = {\r\n  simpleSelectHandleChange: PropTypes.func,\r\n  value : PropTypes.string\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CircularLoader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport palabras from '../Assets/palabras.json';\r\nimport frases from '../Assets/frases.json';\r\nimport CircularLoader from './CircularLoader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    fontSize: 14\r\n  },\r\n});\r\n/**\r\n * Muestra el tipo de palabra a traducir y su traducción\r\n * @param {string} kindOfTranslation el tipo de traducción a realizar (Embera-Español o Español-Embera) \r\n * @param {string} textToTranslate es el texto a traducir, proviene de TextInput o de SelectWords\r\n */\r\nexport default function Translation(props) {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n  const [translation, setTranslation] = useState('');\r\n\r\n  //Comentarios:\r\n  // De forma similar a componentDidMount y componentDidUpdate en clases de React\r\n  useEffect(() => {\r\n    //En el código inferior creo el algoritmo de búsqueda de las palabras\r\n    const text = props.textToTranslate;\r\n    //elimino los símbolos especiales como ?, ! y tíldes para buscar en el objeto JSON de las palabras\r\n    const specialSymbols = /[¿?¡!]/g;\r\n    const textReplaced = text !== undefined ? text.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase() : '';\r\n    let entriesArray = [];\r\n    //si se trata de traducción se usan las frases, de lo contrario las palabras para el diccionario\r\n    const entriesArrayCheck = props.translation ? Object.entries(frases) : Object.entries(palabras);\r\n    let index = 0;\r\n    //revisar si se trata de un traduccion de palabra o frase\r\n    if(!props.translation){\r\n      if (entriesArrayCheck.length >= process.env.REACT_APP_CHECK_LENGTH) {\r\n        for (const property in palabras) {\r\n          index++;\r\n          if (index <= process.env.REACT_APP_CHECK_LENGTH) {\r\n            entriesArray.push([property, palabras[property]])\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      //se trata de una traduccion de frase\r\n      entriesArray = entriesArrayCheck;\r\n    }\r\n    if(!props.translation){\r\n      let wordReplacedFinal;\r\n    let temporalArrayForSavingInnerArrays = [];\r\n    let wordsFormatted = entriesArray.map((word) => {\r\n      const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n      let wordReplaced;\r\n      //revisar si la palabra que se revisa es un arreglo\r\n      if (Array.isArray(word[index])) {\r\n        wordReplacedFinal = word[index].map((innerWord) => {\r\n          let innerWordReplaced = innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n          temporalArrayForSavingInnerArrays.push(innerWordReplaced);\r\n          return innerWordReplaced;\r\n        })\r\n\r\n      } else {\r\n        return wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n      }\r\n      if (index !== 0) {\r\n        wordReplacedFinal.forEach((el) => { wordReplaced = el; });\r\n      }\r\n      return wordReplaced;\r\n    });\r\n    let wordsFormattedFinal = [];\r\n    let wordsIncluded;\r\n    if (props.kindOfTranslation === 'Embera-Español') {\r\n      //si el tipo de traduccion es embera a español, pueden haber arrays anidados, hacer push con los arrays\r\n      wordsFormattedFinal = [...wordsFormatted, ...temporalArrayForSavingInnerArrays]\r\n      wordsIncluded = wordsFormattedFinal.includes(textReplaced);\r\n\r\n    } else {\r\n      wordsIncluded = wordsFormatted.includes(textReplaced);\r\n    }\r\n    if (wordsIncluded) {\r\n      entriesArray.find((word) => {\r\n        const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n        const indexTwo = index === 0 ? 1 : 0;\r\n        let wordReplaced;\r\n        if (Array.isArray(word[index])) {\r\n          wordReplaced = word[index].map((innerWord) => innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase());\r\n        } else {\r\n          wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n        }\r\n        if (typeof wordReplaced !== 'object' && wordReplaced === textReplaced) {\r\n          //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n          //y se procede a actualizar la vista con la palabra traducida\r\n          if (Array.isArray(word[indexTwo])) {\r\n            //la palabra que coincide es un array, por lo que se muestran las dos traducciones posibles\r\n            setTranslation(word[indexTwo][0] + ' / ' + word[indexTwo][1])\r\n          } else {\r\n            setTranslation(word[indexTwo]);\r\n          }\r\n          setLoading(true);\r\n        } else if (typeof wordReplaced === 'object') {\r\n          //es un arreglo y es necesario iterar para comparar \r\n          wordReplaced.forEach((el) => {\r\n            if (el === textReplaced) {\r\n              //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n              //y se procede a actualizar la vista con la palabra traducida\r\n              setTranslation(word[indexTwo])\r\n              setLoading(true);\r\n            }\r\n          })\r\n        }\r\n        return null;\r\n      }\r\n      )\r\n    } else if (textReplaced !== '') {\r\n      setTranslation('Palabra no encontrada');\r\n    } else {\r\n      setTranslation('');\r\n    }\r\n    }\r\n    else {\r\n      //traducir frase\r\n      //verificar si se trata de una traduccion del español al embera\r\n      if(props.kindOfTranslation === 'Español-Embera'){\r\n        //traduccion del español al embera\r\n        let coincide = false;\r\n        const specialSymbols = /[¿?¡!.,:; ]/g;\r\n        const textoEnMinusculaSinCaracteresEspeciales =   props.textToTranslate.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n        //const textoEnFrasesEnMinusculasSinCaracteresEspeciales; \r\n        entriesArray.every(el=>{\r\n          const fraseEnEspanolEnMinusculasSinCaracteresEspeciales = el[0].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase(); \r\n          if(textoEnMinusculaSinCaracteresEspeciales === fraseEnEspanolEnMinusculasSinCaracteresEspeciales){\r\n            //la frase en la lista coincide con el input del usuario\r\n            coincide = true;\r\n            setTranslation(el[1]);\r\n            setLoading(true);\r\n            return false;\r\n          } else {\r\n            coincide = false;\r\n            return true;\r\n          }\r\n        });\r\n        //si coincide traducir el texto, si no avisar al usuario que la frase no fue encontrada\r\n        if(!coincide){\r\n          setTranslation('Frase no encontrada');\r\n        } \r\n      } else {\r\n        //traducccion del embera al espanol\r\n          let coincide = false;\r\n          const specialSymbols = /[¿?¡!.,:; ]/g;\r\n          const textoEnMinusculaSinCaracteresEspeciales =   props.textToTranslate.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n          entriesArray.every(el=>{\r\n            const fraseEnEmberaEnMinusculasSinCaracteresEspeciales = el[1].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase(); \r\n            if(textoEnMinusculaSinCaracteresEspeciales === fraseEnEmberaEnMinusculasSinCaracteresEspeciales){\r\n              //la frase en la lista coincide con el input del usuario\r\n              coincide = true;\r\n              setTranslation(el[0]);\r\n              setLoading(true);\r\n              return false;\r\n            } else {\r\n              coincide = false;\r\n              return true;\r\n            }\r\n          });\r\n          //si coincide traducir el texto, si no avisar al usuario que la frase no fue encontrada\r\n          if(!coincide){\r\n            setTranslation('Frase no encontrada');\r\n          } \r\n\r\n      }\r\n    }\r\n\r\n  }, [props.textToTranslate, props.kindOfTranslation]);\r\n  useEffect(() => {\r\n    //Agrego el loader por un segundo y medio antes de mostrar la palabra traducida\r\n    setTimeout(() => setLoading(false), 1500);\r\n  }, [loading]);\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Grid container justify='center'>\r\n          <Typography className={classes.title} color=\"primary\" gutterBottom>\r\n            {props.kindOfTranslation}\r\n          </Typography>\r\n        </Grid>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {!props.translation ? 'Palabra' : 'Frase'}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.textToTranslate}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Traducción\r\n        </Typography>\r\n        {loading ?\r\n          <CircularLoader /> :\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {translation}\r\n          </Typography>}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nTranslation.propTypes = {\r\n  kindOfTranslation: PropTypes.string,\r\n  textToTranslate: PropTypes.string\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport palabras from '../Assets/palabras.json';\r\nimport { v4 as uuid_v4 } from \"uuid\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 128,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}), { name: 'MuiFilledInput' });\r\n\r\n\r\n/**\r\n * Despliega una lista seleccionable con las palabras incluídas en el archivo palabras.json\r\n * @param {function} selectWordsOnChange  es un callbak que envia la palabra seleccionada al componente padre App\r\n   @param {boolean} Spanish es un booleano que indica si la palabra a traducir es en Español o en Embera\r\n */\r\nexport default function SelectWords(props) {\r\n  const classes = useStyles();\r\n  const [word, setWord] = useState(props.Spanish ? '¿Cómo estás?' : 'Sa buma');\r\n  const handleChange = (event) => {\r\n    setWord(event.target.value);\r\n    props.selectWordsOnChange(event.target.value);\r\n  };\r\n  let entriesArray = [];\r\n  const entriesArrayCheck = Object.entries(palabras);\r\n  let index = 0;\r\n  if (entriesArrayCheck.length >= process.env.REACT_APP_CHECK_LENGTH) {\r\n    for (const property in palabras) {\r\n      index++;\r\n      if (index <= process.env.REACT_APP_CHECK_LENGTH) {\r\n        entriesArray.push([property, palabras[property]])\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-filled-label\">{props.Spanish ? 'Lista de Palabras Español' : 'Lista de Palabras Embera'}</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={word}\r\n          onChange={handleChange}\r\n        >\r\n          {entriesArray.map((word) => {\r\n            if (props.Spanish) {\r\n              return <MenuItem key={uuid_v4()} value={word[0]}>{word[0]}</MenuItem>\r\n            } else if (Array.isArray(word[1])) {\r\n              return word[1].map((word) => <MenuItem value={word} key={uuid_v4()}>{word}</MenuItem>);\r\n            } else {\r\n              return <MenuItem key={uuid_v4()} value={word[1]}>{word[1]}</MenuItem>\r\n            }\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nSelectWords.propTypes = {\r\n  selectWordsOnChange: PropTypes.func,\r\n  Spanish: PropTypes.bool\r\n};","import React, { useState } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n// Define a model for linear regression.\r\nconst model = tf.sequential();\r\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n\r\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n\r\n// Generate some synthetic data for training.\r\nconst xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\r\nconst ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\r\n\r\n// Train the model using the data.\r\nmodel.fit(xs, ys, {epochs: 10}).then(() => {\r\n  // Use the model to do inference on a data point the model hasn't seen before:\r\n  model.predict(tf.tensor2d([5], [1, 1])).print();\r\n  // Open the browser devtools to see the output\r\n});\r\n  \r\n\r\n/*import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nconst HOSTED_URLS = {\r\n    model:\r\n        'https://storage.googleapis.com/tfjs-models/tfjs/translation_en_fr_v1/model.json',\r\n    metadata:\r\n        'https://storage.googleapis.com/tfjs-models/tfjs/translation_en_fr_v1/metadata.json'\r\n  };\r\n  \r\n  const LOCAL_URLS = {\r\n    model: 'http://localhost:1235/resources/model.json',\r\n    metadata: 'http://localhost:1235/resources/metadata.json'\r\n  };*/","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport AppBarHeader from './Atoms/AppBarHeader';\nimport TextInput from './Atoms/TextInput';\nimport TextInputTranslation from './Atoms/TextInputTranslation';\nimport SimpleSelect from './Atoms/SimpleSelect';\nimport Translation from './Atoms/Translation';\nimport SelectWords from './Atoms/SelectWords';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport TensorFlowModels from './Translator/TensorFlowModels';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: '5px'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  cardStyles: {\n    flexGrow: 1,\n    marginTop: '15px'\n  },\n  dividerStyles : {\n    marginTop : 15\n  }\n}));\n\n/**\n * Punto de entrada de la aplicación, renderiza toda la app. \n */\nfunction App() {\n  //clase para definir el estilo de los componentes\n  const classes = useStyles();\n  //estado de la app usando rect hooks\n  const [userTextInput, setUserTextInput] = useState('');\n  const [userTextInputTranslation, setUserTextInputTranslation] = useState('');\n  const [translationSelected, setTranslationSelected] = useState('Español-Embera');\n  const [translationSelectedTranslation, setTranslationSelectedTranslation] = useState('Español-Embera');\n  //listeners\n  const handleChange = (ev) => setUserTextInput(ev);\n  const handleChangeTranslation = (ev) => setUserTextInputTranslation(ev);\n  const selectChanged = (ev) => setUserTextInput(ev);\n  const simpleSelectHandleChange = (ev) => setTranslationSelected(ev);\n  const simpleSelectHandleChangeTranslation = (ev) => setTranslationSelectedTranslation(ev);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBarHeader />\n      </header>\n      <section>\n      <Grid container className={classes.root} spacing={2} justify='center' direction=\"column\" alignContent='center'>\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Diccionario\n      </Typography>\n        \n        <Grid container className={classes.root} spacing={2} justify='center' alignContent='center'>\n          <TextInput\n            handleChange={handleChange} />\n          <SimpleSelect\n            simpleSelectHandleChange={simpleSelectHandleChange}\n            value={translationSelected} />\n          <SelectWords Spanish={true} selectWordsOnChange={selectChanged} />\n          <SelectWords Spanish={false} selectWordsOnChange={selectChanged} />\n        </Grid>\n        </Grid>\n      </section>\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n          <Translation textToTranslate={userTextInput}\n            kindOfTranslation={translationSelected} translation={false} />\n        </Grid>\n      </section>\n      <Divider className={classes.dividerStyles} />\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center' direction=\"column\">\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Traductor\n      </Typography>\n      <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n      <TextInputTranslation\n            handleChange={handleChangeTranslation} />\n              <SimpleSelect\n            simpleSelectHandleChange={simpleSelectHandleChangeTranslation}\n            value={translationSelectedTranslation} />\n      </Grid>\n        </Grid>\n      </section>\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n          <Translation textToTranslate={userTextInputTranslation}\n            kindOfTranslation={translationSelectedTranslation} translation={true}/>\n        </Grid>\n      </section>\n      <Divider className={classes.dividerStyles} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Helmet } from 'react-helmet'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>Diccionario Español-Embera</title>\n    </Helmet>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}